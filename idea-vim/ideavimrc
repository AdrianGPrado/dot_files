" neovim-config

"" Vim settings and mappings {{{
"" ============================================================================
"" Vim settings and mapping s

"" no vi-compatible
set nocompatible

"" allow plugins by file type (required for plugins!)
filetype plugin on
filetype indent on

"" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

"" tab length exceptions on some file types
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd FileType html setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType htmldjango setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4

"" Highlight words to avoid in tech writing
"" http://css-tricks.com/words-avoid-educational-writing/
highlight TechWordsToAvoid ctermbg=red ctermfg=white
match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
autocmd BufWinEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertLeave * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd BufWinLeave * call clearmatches()

"" Close all folds when opening a new buffer
autocmd BufRead * setlocal foldmethod=marker

"" always show status bar
set laststatus=2

"" UTF encoding
set encoding=utf-8

"" incremental search
set incsearch

"" highlighted search results
set hlsearch

"" syntax highlight on
syntax on

"" show line numbers
set number

"" relative number
set relativenumber

"" Highlight the current line
set cursorline

"" Ensure Vim doesn't beep at you every time you make a mistype
set visualbell

"" highlight a matching [{()}] when cursor is placed on start/end character
set showmatch

"" Set built-in file system explorer to use layout similar to the NERDTree plugin
let g:netrw_liststyle=7

"" Comment this line to enable autocompletion preview window
"" (displays documentation related to the selected completion option)
"" Disabled by default because preview makes the window flicker
set completeopt-=preview

"" Auto indent
set autoindent

"" Smart indent
set smartindent

"" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=7

"" autocompletion of files and commands behaves like shell
"" (complete only the common part, list the options that match)
set wildmode=list:longest

"" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile                      " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo

"" Always highlight column 90 so it's easier to see where
"" cutoff appears on longer screens
"" http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
autocmd BufWinEnter * highlight ColorColumn ctermbg=36
set colorcolumn=90

"" Add a bit extra marging to the left
set foldcolumn=1

"" Highlight tailing whitespace
"set listchars=tab:>-,trail:·,extends:>,precedes:<,space:·
    "set list

"" With a map leader it's possible to do extra key combinations
"" like `<leader>w` to save the current file.
let mapleader = ','
let g:mapleader = ','

"" Fast saving
nmap <Leader>w :w!<cr>
nmap <Leader>q :q<cr>

"" tab navigation mappings
map <Leader>tn :tabn<CR>
map <Leader>tp :tabp<CR>
map <Leader>tm :tabm
map <Leader>tt :tabnew
map <Leader>ts :tab split<CR>
map <C-S-Right> :tabn<CR>
imap <C-S-Right> <ESC>:tabn<CR>
map <C-S-Left> :tabp<CR>
imap <C-S-Left> <ESC>:tabp<CR>

"" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
"" navigate windows with meta+arrows
"map <M-Right> <c-w>l
"map <M-Left> <c-w>h
"map <M-Up> <c-w>k
"map <M-Down> <c-w>j
"imap <M-Right> <ESC><c-w>l
"imap <M-Left> <ESC><c-w>h
"imap <M-Up> <ESC><c-w>k
"imap <M-Down> <ESC><c-w>j

"" old autocomplete keyboard shortcut
imap <C-J> <C-n>

"" save as sudo
ca w!! w !sudo tee "%"

"" Remap VIM to 0 to first non-blank character
map 0 ^

"" simple recursive grep
nmap <Leader>r :Ack
nmap <Leader>R :Ack <cword><CR>

"" use 256 colors when possible

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
syntax on
colorscheme onedark
set background=dark

let base16colorspace=256

"" store yankring history file there too
let g:yankring_history_dir = '~/.vim/dirs/'

"" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

"" NeoVim settings and mappings

"" map <Esc> to exit terminal-mode: >
tnoremap <Esc> <C-\><C-n>

"" }}}

